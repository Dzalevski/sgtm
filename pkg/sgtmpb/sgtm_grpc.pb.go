// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sgtmpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WebAPIClient is the client API for WebAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebAPIClient interface {
	Ping(ctx context.Context, in *Ping_Request, opts ...grpc.CallOption) (*Ping_Response, error)
	Status(ctx context.Context, in *Status_Request, opts ...grpc.CallOption) (*Status_Response, error)
}

type webAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewWebAPIClient(cc grpc.ClientConnInterface) WebAPIClient {
	return &webAPIClient{cc}
}

func (c *webAPIClient) Ping(ctx context.Context, in *Ping_Request, opts ...grpc.CallOption) (*Ping_Response, error) {
	out := new(Ping_Response)
	err := c.cc.Invoke(ctx, "/sgtm.WebAPI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAPIClient) Status(ctx context.Context, in *Status_Request, opts ...grpc.CallOption) (*Status_Response, error) {
	out := new(Status_Response)
	err := c.cc.Invoke(ctx, "/sgtm.WebAPI/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebAPIServer is the server API for WebAPI service.
type WebAPIServer interface {
	Ping(context.Context, *Ping_Request) (*Ping_Response, error)
	Status(context.Context, *Status_Request) (*Status_Response, error)
}

// UnimplementedWebAPIServer can be embedded to have forward compatible implementations.
type UnimplementedWebAPIServer struct {
}

func (*UnimplementedWebAPIServer) Ping(context.Context, *Ping_Request) (*Ping_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedWebAPIServer) Status(context.Context, *Status_Request) (*Status_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterWebAPIServer(s *grpc.Server, srv WebAPIServer) {
	s.RegisterService(&_WebAPI_serviceDesc, srv)
}

func _WebAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgtm.WebAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAPIServer).Ping(ctx, req.(*Ping_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebAPI_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Status_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAPIServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgtm.WebAPI/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAPIServer).Status(ctx, req.(*Status_Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _WebAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sgtm.WebAPI",
	HandlerType: (*WebAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _WebAPI_Ping_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _WebAPI_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sgtm.proto",
}
