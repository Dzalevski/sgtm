syntax = "proto3";

package sgtm;

option go_package = "moul.io/sgtm/pkg/sgtmpb";

import "google/api/annotations.proto";
import "patch/go.proto";

service WebAPI {
  rpc Register(Register.Request) returns (Register.Response) { option (google.api.http) = {post: "/api/v1/Register", body: "*"}; }
  rpc UserList(UserList.Request) returns (UserList.Response) { option (google.api.http) = {get: "/api/v1/UserList"}; }
  rpc PostList(PostList.Request) returns (PostList.Response) { option (google.api.http) = {get: "/api/v1/PostList"}; }
  rpc Ping(Ping.Request) returns (Ping.Response) { option (google.api.http) = {get: "/api/v1/Ping"}; }
  rpc Status(Status.Request) returns (Status.Response) { option (google.api.http) = {get: "/api/v1/Status"}; }
}

message Ping {
  message Request {}
  message Response {}
}

message Status {
  message Request {}
  message Response {
    int32 uptime = 1;
    string hostname = 2;
  }
}

message Register {
  message Request {
    string email = 10;
    string slug = 11;
    string firstname = 12;
    string lastname = 13;
  }
  message Response {
    User user = 1;
  }
}

message UserList {
  message Request {}
  message Response {
    repeated User users = 1;
  }
}

message PostList {
  message Request {}
  message Response {
    repeated Post posts = 1;
  }
}

/// Models

/*
╔══════════════╗    ╔══════════════╗
║     Post     ║    ║     User     ║
║              ║    ║              ║
║    Author    ║    ║    Email     ║
║    Title     ║    ║     Slug     ║
║     Slug     ║────║     Name     ║
║   ReplyTo    ║    ║              ║
║    ForkOf    ║    ║              ║
║     Kind     ║    ║              ║
╚══════════════╝    ╚══════════════╝
 */

message User {
  int64 id = 1 [(go.field) = {name: 'ID', tags: 'gorm:"primary_key"'}];
  int64 created_at = 2 [(go.field) = {tags: 'gorm:"autocreatetime:nano"'}];
  int64 updated_at = 3 [(go.field) = {tags: 'gorm:"autoupdatetime:nano"'}];
  int64 deleted_at = 4;

  string email = 10 [(go.field) = {tags: 'gorm:"size:255;not null;index:,unique"'}];
  string slug = 11 [(go.field) = {tags: 'gorm:"size:32;not null;default:\'\'"'}];
  string firstname = 12 [(go.field) = {tags: 'gorm:"size:255;not null;default:\'\'"'}];
  string lastname = 13 [(go.field) = {tags: 'gorm:"size:255;not null;default:\'\'"'}];
  string locale = 14 [(go.field) = {tags: 'gorm:"size:32;not null;default:\'\'"'}];
  string avatar = 15 [(go.field) = {tags: 'gorm:"size:255;not null;default:\'\'"'}];
  string discord_id = 16 [(go.field) = {name: "DiscordID", tags: 'gorm:"size:255;not null;default:\'\'"'}];
  string discord_username = 17 [(go.field) = {tags: 'gorm:"size:255;not null;default:\'\'"'}];
  // bio
  // timezone
  // location
}

message Post {
  int64 id = 1 [(go.field) = {name: 'ID', tags: 'gorm:"primary_key"'}];
  int64 created_at = 2 [(go.field) = {tags: 'gorm:"autocreatetime:nano"'}];
  int64 updated_at = 3 [(go.field) = {tags: 'gorm:"autoupdatetime:nano"'}];
  int64 deleted_at = 4;

  User author = 10;
  int64 author_id = 11 [(go.field) = {name: 'AuthorID'}];
  string title = 12;
  string slug = 13;
  int64 thread_post_id = 14 [(go.field) = {name: 'ThreadPostID'}];
  Post thread_post = 15;
  int64 reply_to_id = 16 [(go.field) = {name: 'ReplyToID'}];
  Post reply_to = 17;
  Kind kind = 18;
  Visibility visibility = 19;
  string url = 20 [(go.field) = {name: 'URL'}];
  Driver driver = 21;
  string sound_cloud_track_secret_token = 22;
  uint64 sound_cloud_track_id = 23 [(go.field) = {name: 'SoundCloudTrackID'}];
  string sound_cloud_metadata = 24;
  string genre = 25;
  uint64 duration = 26;
  string artwork_url = 27 [(go.field) = {name: 'ArtworkURL'}];
  double bpm = 28 [(go.field) = {name: 'BPM'}];
  string key_signature = 29;
  string isrc = 30 [(go.field) = {name: 'ISRC'}];
  string description = 31;
  string download_url = 32 [(go.field) = {name: 'DownloadURL'}];

  enum Kind {
    UnknownKind = 0;
    PostKind = 1;
    CommentKind = 2;
  }
}

/// Common enums

enum Visibility {
  UnknownVisibility = 0;
  Public = 1;
  Draft = 2;
}
enum Driver {
  UnknownDriver = 0;
  SoundCloud = 1;
}

/// Internal

message Session {
  int64 user_id = 1 [(go.field) = {name: "UserID"}];
  string discord_access_token = 2;
}
